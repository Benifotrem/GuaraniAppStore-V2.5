name: Deploy to VPS with Secrets

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create .env files from secrets
      run: |
        # Create root .env
        cat > .env <<EOF
        REACT_APP_BACKEND_URL=${{ secrets.REACT_APP_BACKEND_URL }}
        OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}
        ANTHROPIC_API_KEY_FALLBACK=${{ secrets.ANTHROPIC_API_KEY_FALLBACK }}
        OPENROUTER_MODEL_ID_HIGH=anthropic/claude-sonnet-4.5
        OPENROUTER_MODEL_ID_LOW=openai/gpt-4o-mini
        OPENROUTER_EMBEDDING_MODEL=text-embedding-ada-002
        POSTGRES_USER=${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_DB=${{ secrets.POSTGRES_DB }}
        WATCHER_CHECK_INTERVAL=3600
        EOF

        # Create backend/.env
        cat > backend/.env <<EOF
        MONGO_URL=mongodb://mongodb:27017/guarani_appstore
        USE_MONGODB=true
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        JWT_ALGORITHM=HS256
        JWT_EXPIRATION_HOURS=720
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}
        FRONTEND_URL=${{ secrets.REACT_APP_BACKEND_URL }}
        ADMIN_EMAIL=admin@guaraniappstore.com
        PULSEBOT_TOKEN=${{ secrets.PULSEBOT_TOKEN }}
        MOMENTUM_BOT_TOKEN=${{ secrets.MOMENTUM_BOT_TOKEN }}
        STOPFRAUDE_BOT_TOKEN=${{ secrets.STOPFRAUDE_BOT_TOKEN }}
        TELEGRAM_WEBHOOK_URL=${{ secrets.TELEGRAM_WEBHOOK_URL }}
        TELEGRAM_WEBHOOK_SECRET=${{ secrets.TELEGRAM_WEBHOOK_SECRET }}
        TWITTER_API_KEY=${{ secrets.TWITTER_API_KEY }}
        TWITTER_API_SECRET=${{ secrets.TWITTER_API_SECRET }}
        TWITTER_BEARER_TOKEN=${{ secrets.TWITTER_BEARER_TOKEN }}
        REDDIT_CLIENT_ID=${{ secrets.REDDIT_CLIENT_ID }}
        REDDIT_CLIENT_SECRET=${{ secrets.REDDIT_CLIENT_SECRET }}
        REDDIT_USER_AGENT=guaraniappstore/1.0
        BREVO_SMTP_HOST=smtp-relay.brevo.com
        BREVO_SMTP_PORT=587
        BREVO_SMTP_USER=${{ secrets.BREVO_SMTP_USER }}
        BREVO_SMTP_PASSWORD=${{ secrets.BREVO_SMTP_PASSWORD }}
        BREVO_FROM_EMAIL=noreply@guaraniappstore.com
        BREVO_FROM_NAME=GuaraniAppStore
        BTC_WALLET=${{ secrets.BTC_WALLET }}
        ETH_WALLET=${{ secrets.ETH_WALLET }}
        USDT_ETH_WALLET=${{ secrets.ETH_WALLET }}
        PAGOPAR_PUBLIC_KEY=${{ secrets.PAGOPAR_PUBLIC_KEY }}
        PAGOPAR_PRIVATE_KEY=${{ secrets.PAGOPAR_PRIVATE_KEY }}
        PAGOPAR_ENV=production
        PAGOPAR_PRODUCTION_URL=https://api.pagopar.com
        EOF

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

    - name: Transfer files to VPS
      run: |
        # Transfer .env files
        scp .env ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/opt/GuaraniAppStore-V2.5/.env
        scp backend/.env ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/opt/GuaraniAppStore-V2.5/backend/.env

    - name: Deploy on VPS
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
          cd /opt/GuaraniAppStore-V2.5
          
          # Pull latest code
          git pull origin main
          
          # Set correct permissions
          chmod 600 .env backend/.env
          
          # Rebuild and restart services
          docker-compose build
          docker-compose up -d
          
          # Check status
          docker-compose ps
          
          # Show logs
          docker-compose logs --tail=50
        ENDSSH

    - name: Verify deployment
      run: |
        sleep 30
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
          cd /opt/GuaraniAppStore-V2.5
          
          # Check health
          curl -f http://localhost:8001/health || echo "Backend health check failed"
          curl -f http://localhost:8002/health || echo "Agent health check failed"
          
          # Show running containers
          docker-compose ps
        ENDSSH

    - name: Cleanup
      if: always()
      run: |
        rm -f .env backend/.env ~/.ssh/id_rsa
