"""
Bot de Telegram para Pulse IA
An√°lisis de sentimiento del mercado crypto
"""
import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode
from motor.motor_asyncio import AsyncIOMotorClient

from pulse_service import PulseIAService

# Configuraci√≥n
BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN', os.environ.get('CRYPTO_BOTS_TOKEN'))
MONGO_URL = os.environ.get('MONGO_URL', 'mongodb://localhost:27017/guarani_appstore')

# Servicio de Pulse IA
pulse_service = None

class PulseTelegramBot:
    def __init__(self):
        self.db_client = AsyncIOMotorClient(MONGO_URL)
        self.db = self.db_client.get_database()
        global pulse_service
        if pulse_service is None:
            pulse_service = PulseIAService()
        self.pulse = pulse_service
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /start"""
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        # Registrar usuario
        await self.register_user(chat_id, user.username)
        
        keyboard = [
            [
                InlineKeyboardButton("üìä BTC Analysis", callback_data='pulse_BTC'),
                InlineKeyboardButton("üìä ETH Analysis", callback_data='pulse_ETH')
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è Configuraci√≥n", callback_data='pulse_config'),
                InlineKeyboardButton("üìà Trending", callback_data='pulse_trending')
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = f"""üìä *¬°Bienvenido a Pulse IA!*

Hola {user.first_name}, soy tu asistente de an√°lisis de sentimiento del mercado crypto.

*¬øQu√© puedo hacer?*
‚Ä¢ Analizar sentimiento de cualquier crypto
‚Ä¢ Detectar FOMO y FUD en tiempo real
‚Ä¢ Monitorear 15+ fuentes de noticias
‚Ä¢ Rastrear Twitter y Reddit
‚Ä¢ Proporcionar recomendaciones

*Comandos disponibles:*
/pulse <SYMBOL> - Analizar sentimiento
/trending - Ver cryptos trending
/track <SYMBOL> - Trackear s√≠mbolo
/config - Configurar alertas
/help - Ayuda

¬°Selecciona una opci√≥n para empezar! üëá
        """
        
        await update.message.reply_text(
            welcome_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    async def pulse_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /pulse <SYMBOL>"""
        symbol = context.args[0].upper() if context.args else 'BTC'
        
        processing_msg = await update.message.reply_text(
            f"üìä Analizando sentimiento de {symbol}...\n‚è≥ Esto puede tomar 30-60 segundos..."
        )
        
        try:
            # Analizar sentimiento
            analysis = await self.pulse.analyze_crypto_sentiment(symbol)
            
            # Guardar en base de datos
            await self.save_analysis(analysis, update.effective_chat.id)
            
            # Formatear mensaje
            message = self.pulse.format_telegram_message(analysis)
            
            # Enviar resultado
            await processing_msg.edit_text(
                message,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            await processing_msg.edit_text(
                f"‚ùå Error al analizar {symbol}: {str(e)}\n\nIntenta nuevamente en unos minutos."
            )
    
    async def callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Manejar botones inline"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data.startswith('pulse_'):
            symbol = data.split('_')[1]
            
            await query.message.reply_text(
                f"üìä Analizando {symbol}...\n‚è≥ Esto puede tomar 30-60 segundos..."
            )
            
            try:
                analysis = await self.pulse.analyze_crypto_sentiment(symbol)
                await self.save_analysis(analysis, query.message.chat_id)
                
                message = self.pulse.format_telegram_message(analysis)
                await query.message.reply_text(
                    message,
                    parse_mode=ParseMode.MARKDOWN
                )
            except Exception as e:
                await query.message.reply_text(f"‚ùå Error: {str(e)}")
        
        elif data == 'pulse_config':
            await self.show_config(query)
        
        elif data == 'pulse_trending':
            await self.show_trending(query)
    
    async def trending_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /trending - Mostrar cryptos trending"""
        await update.message.reply_text(
            "üìà *Cryptos Trending*\n\nAnalizando las cryptos m√°s populares...",
            parse_mode=ParseMode.MARKDOWN
        )
        
        # Analizar m√∫ltiples cryptos populares
        symbols = ['BTC', 'ETH', 'BNB', 'SOL', 'ADA']
        
        results = []
        for symbol in symbols:
            try:
                analysis = await self.pulse.analyze_crypto_sentiment(symbol)
                results.append(analysis)
            except:
                pass
        
        if results:
            message = "üìà *Top Cryptos - Sentiment Analysis*\n\n"
            
            for analysis in results:
                emoji = 'üü¢' if analysis['overall_sentiment'] > 20 else 'üü°' if analysis['overall_sentiment'] > -20 else 'üî¥'
                message += f"{emoji} *{analysis['symbol']}*: {analysis['overall_sentiment']:+d}/100 - {analysis['recommendation']}\n"
            
            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
    
    async def track_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /track <SYMBOL> - Trackear s√≠mbolo"""
        if not context.args:
            await update.message.reply_text(
                "Por favor especifica un s√≠mbolo: `/track BTC`",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        symbol = context.args[0].upper()
        chat_id = update.effective_chat.id
        
        # Agregar s√≠mbolo a tracked_symbols
        await self.db.pulse_subscriptions.update_one(
            {'telegram_chat_id': chat_id},
            {
                '$addToSet': {'tracked_symbols': symbol},
                '$set': {'updated_at': asyncio.get_event_loop().time()}
            },
            upsert=True
        )
        
        await update.message.reply_text(
            f"‚úÖ Ahora est√°s trackeando *{symbol}*\n\nRecibir√°s alertas cuando haya cambios significativos en el sentimiento.",
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def config_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /config - Mostrar configuraci√≥n"""
        chat_id = update.effective_chat.id
        
        # Obtener configuraci√≥n actual
        subscription = await self.db.pulse_subscriptions.find_one({'telegram_chat_id': chat_id})
        
        if subscription:
            tracked = subscription.get('tracked_symbols', [])
            notifications = subscription.get('notifications_enabled', True)
        else:
            tracked = []
            notifications = True
        
        keyboard = [
            [InlineKeyboardButton(
                f"üîî Notificaciones: {'ON' if notifications else 'OFF'}",
                callback_data='toggle_notif'
            )],
            [InlineKeyboardButton("üìä Ver Tracked Symbols", callback_data='show_tracked')],
            [InlineKeyboardButton("üîô Volver", callback_data='back_main')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        config_text = f"""‚öôÔ∏è *Configuraci√≥n Pulse IA*

*S√≠mbolos Trackeados:* {len(tracked)}
{', '.join(tracked) if tracked else 'Ninguno'}

*Notificaciones:* {'Activadas ‚úÖ' if notifications else 'Desactivadas ‚ùå'}

Usa `/track <SYMBOL>` para agregar s√≠mbolos.
        """
        
        await update.message.reply_text(
            config_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /help"""
        help_text = """üìö *Ayuda - Pulse IA*

*Comandos Principales:*
/pulse <SYMBOL> - Analizar sentimiento de una crypto
  Ejemplo: `/pulse BTC`

/trending - Ver cryptos m√°s populares

/track <SYMBOL> - Trackear s√≠mbolo para alertas
  Ejemplo: `/track ETH`

/config - Ver y modificar configuraci√≥n

/help - Mostrar esta ayuda

*¬øQu√© analizamos?*
‚Ä¢ 15+ fuentes de noticias RSS
‚Ä¢ Twitter/X (300+ cuentas crypto)
‚Ä¢ Reddit (5 subreddits principales)
‚Ä¢ An√°lisis con IA (FinBERT)

*M√©tricas:*
‚Ä¢ Sentiment Score (-100 a +100)
‚Ä¢ FOMO/FUD Detection
‚Ä¢ Trending Keywords
‚Ä¢ Recommendation (Bullish/Bearish/Neutral)

¬øPreguntas? Escribe a @GuaraniAppStore
        """
        
        await update.message.reply_text(
            help_text,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def show_config(self, query):
        """Mostrar configuraci√≥n (desde callback)"""
        keyboard = [
            [InlineKeyboardButton("üîî Toggle Notificaciones", callback_data='toggle_notif')],
            [InlineKeyboardButton("üìä Ver Tracked", callback_data='show_tracked')],
            [InlineKeyboardButton("üîô Volver", callback_data='back_main')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(
            "‚öôÔ∏è *Configuraci√≥n*\n\nAjusta tus preferencias:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    async def show_trending(self, query):
        """Mostrar trending (desde callback)"""
        await query.message.edit_text("üìà Analizando cryptos trending...")
        
        symbols = ['BTC', 'ETH', 'BNB']
        results = []
        
        for symbol in symbols:
            try:
                analysis = await self.pulse.analyze_crypto_sentiment(symbol)
                results.append(analysis)
            except:
                pass
        
        if results:
            message = "üìà *Top Cryptos*\n\n"
            for analysis in results:
                emoji = 'üü¢' if analysis['overall_sentiment'] > 20 else 'üü°'
                message += f"{emoji} {analysis['symbol']}: {analysis['overall_sentiment']:+d}/100\n"
            
            await query.message.edit_text(message, parse_mode=ParseMode.MARKDOWN)
    
    async def register_user(self, chat_id, username):
        """Registrar usuario en base de datos"""
        await self.db.pulse_subscriptions.update_one(
            {'telegram_chat_id': chat_id},
            {
                '$set': {
                    'telegram_username': username,
                    'status': 'active'
                },
                '$setOnInsert': {
                    'tracked_symbols': ['BTC', 'ETH'],
                    'notifications_enabled': True,
                    'created_at': asyncio.get_event_loop().time()
                }
            },
            upsert=True
        )
    
    async def save_analysis(self, analysis, chat_id):
        """Guardar an√°lisis en base de datos"""
        await self.db.pulse_sentiment_analysis.insert_one({
            **analysis,
            'requested_by_chat_id': chat_id
        })
    
    async def run(self):
        """Iniciar bot"""
        if not BOT_TOKEN:
            print("‚ùå ERROR: TELEGRAM_BOT_TOKEN no configurado")
            print("   Configura la variable de entorno TELEGRAM_BOT_TOKEN")
            return
        
        print("ü§ñ Inicializando Pulse IA Bot...")
        
        app = Application.builder().token(BOT_TOKEN).build()
        
        # Comandos
        app.add_handler(CommandHandler("start", self.start))
        app.add_handler(CommandHandler("pulse", self.pulse_command))
        app.add_handler(CommandHandler("trending", self.trending_command))
        app.add_handler(CommandHandler("track", self.track_command))
        app.add_handler(CommandHandler("config", self.config_command))
        app.add_handler(CommandHandler("help", self.help_command))
        
        # Callbacks
        app.add_handler(CallbackQueryHandler(self.callback_handler))
        
        print("‚úÖ Pulse IA Bot iniciado!")
        print(f"   Token: {BOT_TOKEN[:10]}...")
        
        await app.run_polling()

async def main():
    bot = PulseTelegramBot()
    await bot.run()

if __name__ == "__main__":
    asyncio.run(main())
