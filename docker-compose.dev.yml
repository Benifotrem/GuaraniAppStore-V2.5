version: '3.8'

# Docker Compose para desarrollo local con hot reload
# Uso: docker compose -f docker-compose.dev.yml up

services:
  postgres:
    image: postgres:15-alpine
    container_name: guarani_postgres_dev
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-guarani_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-guarani_secure_2024}
      POSTGRES_DB: ${POSTGRES_DB:-guarani_appstore}
    ports:
      - "5432:5432"  # Expuesto para conexi√≥n directa
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    networks:
      - guarani_dev_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-guarani_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: guarani_backend_dev
    restart: unless-stopped
    ports:
      - "8001:8001"
    env_file:
      - ./backend/.env
    environment:
      POSTGRES_URL: postgresql://${POSTGRES_USER:-guarani_user}:${POSTGRES_PASSWORD:-guarani_secure_2024}@postgres:5432/${POSTGRES_DB:-guarani_appstore}
      DEBUG: "True"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app  # Hot reload - cambios en vivo
    networks:
      - guarani_dev_network
    command: uvicorn server:app --host 0.0.0.0 --port 8001 --reload

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: guarani_frontend_dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_BACKEND_URL=http://localhost:8001
      - CHOKIDAR_USEPOLLING=true  # Para hot reload en Docker
      - WDS_SOCKET_PORT=3000
    depends_on:
      - backend
    volumes:
      - ./frontend/src:/app/src  # Hot reload - cambios en vivo
      - ./frontend/public:/app/public
      - /app/node_modules  # Persist node_modules
    networks:
      - guarani_dev_network
    stdin_open: true
    tty: true

volumes:
  postgres_dev_data:
    driver: local

networks:
  guarani_dev_network:
    driver: bridge
