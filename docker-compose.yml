version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: guarani_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-guarani_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-guarani_secure_2024}
      POSTGRES_DB: ${POSTGRES_DB:-guarani_appstore}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - guarani_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-guarani_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: guarani_backend
    restart: unless-stopped
    ports:
      - "8001:8001"
    env_file:
      - ./backend/.env
    environment:
      POSTGRES_URL: postgresql://${POSTGRES_USER:-guarani_user}:${POSTGRES_PASSWORD:-guarani_secure_2024}@postgres:5432/${POSTGRES_DB:-guarani_appstore}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
    networks:
      - guarani_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_BACKEND_URL: ${REACT_APP_BACKEND_URL:-http://localhost:8001}
    container_name: guarani_frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - guarani_network

  nginx:
    image: nginx:alpine
    container_name: guarani_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - guarani_network

volumes:
  postgres_data:
    driver: local

networks:
  guarani_network:
    driver: bridge