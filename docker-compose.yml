version: '3.8'

services:
  # ============================================
  # SERVICIOS PRINCIPALES - GUARANIAPPSTORE
  # ============================================
  
  # MongoDB Database (App Principal)
  mongodb:
    image: mongo:7.0
    container_name: guarani_mongodb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    environment:
      - MONGO_INITDB_DATABASE=guarani_appstore
    networks:
      - guarani_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/guarani_appstore --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Principal (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: guarani_backend
    restart: always
    ports:
      - "8001:8001"
    volumes:
      - ./backend:/app
      - backend_logs:/var/log
    env_file:
      - ./backend/.env
    environment:
      - MONGO_URL=mongodb://mongodb:27017/guarani_appstore
      - USE_MONGODB=true
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - guarani_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Principal (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_BACKEND_URL=${REACT_APP_BACKEND_URL}
    container_name: guarani_frontend
    restart: always
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - guarani_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # SERVICIOS DEL AGENTE DEVELOPER
  # ============================================

  # PostgreSQL (Base de datos RAG del Agente)
  postgres_rag:
    image: postgres:15-alpine
    container_name: soporte_postgres_rag
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-soporte_user_seguro}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-contrasena_fuerte_aqui}
      POSTGRES_DB: ${POSTGRES_DB:-soporte_db_rag}
    volumes:
      - postgres_rag_data:/var/lib/postgresql/data
    networks:
      - guarani_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-soporte_user_seguro}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend del Agente Developer (FastAPI/Python)
  soporte_backend:
    build:
      context: ./soporte_agent
      dockerfile: Dockerfile
    container_name: soporte_backend
    restart: always
    ports:
      - "8002:8002"
    volumes:
      - ./soporte_agent:/app
      - soporte_logs:/var/log
    environment:
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-soporte_user_seguro}:${POSTGRES_PASSWORD:-contrasena_fuerte_aqui}@postgres_rag:5432/${POSTGRES_DB:-soporte_db_rag}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - ANTHROPIC_API_KEY_FALLBACK=${ANTHROPIC_API_KEY_FALLBACK}
      - OPENROUTER_MODEL_ID_HIGH=${OPENROUTER_MODEL_ID_HIGH:-anthropic/claude-sonnet-4.5}
      - OPENROUTER_MODEL_ID_LOW=${OPENROUTER_MODEL_ID_LOW:-openai/gpt-4o-mini}
      - OPENROUTER_EMBEDDING_MODEL=${OPENROUTER_EMBEDDING_MODEL:-text-embedding-ada-002}
      - MONGO_URL=mongodb://mongodb:27017/guarani_appstore
    depends_on:
      postgres_rag:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - guarani_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Watcher Script (Verificación de Modelos)
  model_watcher:
    build:
      context: ./watcher_script
      dockerfile: Dockerfile
    container_name: model_watcher
    restart: always
    environment:
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - CHECK_INTERVAL=${WATCHER_CHECK_INTERVAL:-3600}
    networks:
      - guarani_network
    depends_on:
      - soporte_backend

  # Servicio de Migración (Ejecutar solo UNA VEZ con profile)
  migration_tool:
    build:
      context: ./migration_scripts
      dockerfile: Dockerfile
    container_name: migration_tool
    profiles: ["migration"]
    environment:
      - MONGO_URL=mongodb://mongodb:27017/guarani_appstore
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-soporte_user_seguro}:${POSTGRES_PASSWORD:-contrasena_fuerte_aqui}@postgres_rag:5432/${POSTGRES_DB:-soporte_db_rag}
    depends_on:
      mongodb:
        condition: service_healthy
      postgres_rag:
        condition: service_healthy
    networks:
      - guarani_network

  # ============================================
  # NGINX REVERSE PROXY
  # ============================================

  nginx:
    image: nginx:alpine
    container_name: guarani_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
      - soporte_backend
    networks:
      - guarani_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  postgres_rag_data:
    driver: local
  backend_logs:
    driver: local
  soporte_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  guarani_network:
    driver: bridge
